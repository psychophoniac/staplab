function isTarget(tid){
		return pid() == target()
}

//args: sock, send
//args: size, name, sock, family
probe tcp.sendmsg {
	if( isTarget(pid()) ){
		printf("%s socket:%s:%d size:%d\n", 
			ppfunc(), 			//funcname
			inet_get_ip_source(sock),	//socket_ip 				
			inet_get_local_port(sock), 	//socket_port
			size				//toSend datasize 
		)
	}
}

//args: size
probe tcp.sendmsg.return {
	if( isTarget(pid()) ){
		printf("%s.return bytes_sent:%d\n",
			name,
			size
		)
	}
}

/**
size Number of bytes to be received 
saddr A string representing the source IP address 
sock Network socket 
dport TCP destination port 
family IP address family 
name Name of this probe 
sport TCP source port 
daddr A string representing the destination IP address
**/
probe tcp.recvmsg {
	if( isTarget(pid()) ){
		printf("%s source:%s:%d socket:%s:%d destination:%s:%d size:%d family:%s\n",
			name,
			saddr,
			sport,
			inet_get_ip_source(sock),
			inet_get_local_port(sock),
			daddr,
			dport,
			size,
			sock_fam_num2str(family)
		)
	}
//	printf("%s\n", $$parms)
}


/**
sport TCP source port 
name Name of this probe 
family IP address family 
dport TCP destination port 
saddr A string representing the source IP address 
size Number of bytes received or error code if an error occurred. 
daddr A string representing the destination IP address sport
**/
probe tcp.recvmsg.return {
	if( isTarget(pid()) ){
		printf("%s.return source:%s:%d destination:%s:%d size:%d family:%s\n",
			name,
			saddr,
			sport,
			daddr,
			dport,
			size,
			sock_fam_num2str(family)
		)
	}
}

/**
daddr A string representing the destination IP address 
name Name of this probe 
sport TCP source port 
sock Network socket 
dport TCP destination port 
family IP address family 
flags TCP flags (e.g. FIN, etc) 
saddr A string representing the source IP address daddr
**/
probe tcp.disconnect {
	if( isTarget(pid()) ){
		printf("%s socket:%s:%d source:%s:%d destination:%s:%d family:%s flags:%d\n",
			name,
			inet_get_ip_source(sock),
			inet_get_local_port(sock),
			saddr,
			sport,
			daddr,
			dport,
			sock_fam_num2str(family),
			flags
		)
	}
}

//args: ret, name
probe tcp.disconnect.return {
	if( isTarget(pid()) ){
		printf("%s retVal:%d\n",
			name,
			ret
		)	
	}
}
