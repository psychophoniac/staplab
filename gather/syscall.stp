global startTime
global print_time_spent = 1
global tsc% 
global syscalls_nonreturn
global nesting
global calls
global returns
global printData = 1

function timestamp(){
	return gettimeofday_us() - startTime
}

function datestring_s(time){
	if(time >= 0)
		return sprintf("%d.%06d", time/1000000, time%1000000)
	return "N/A"
}

probe begin {
	#there is syscalls that do not return
	syscalls_nonreturn["exit"]=1
	syscalls_nonreturn["exit_group"]=1

	#save startime
	startTime = gettimeofday_us()

	//printf("target pid:%d\n", target())
	//printf("starttime: %s\n", datestring_s(timestamp()))
}

probe end {
	//printf("execTime: %s\n", datestring_s(timestamp()))
	//printf("total calls: %d, total returns: %d\n", calls, returns)
	delete tsc
	delete calls
	delete returns
	delete syscalls_nonreturn
	delete printData
}

function time_spent(funcname){
	then = tsc[funcname, nesting[funcname]] 
	if(then > 0){
		now = gettimeofday_us()
		if(now > then)
			return (now - then);
	}
	return -1;
}

function filter(execname, funcname, pid, target){
	return ( execname == "stapio" || pid != target || funcname == "tracesys")
} 

function logFunc(execname, funcname, pid, target, call, data){
	if( filter(execname, funcname, pid, target) ) 
		return

	datestr = datestring_s(timestamp())

	if( call == 1){
		nesting[funcname] = nesting[funcname] + 1
		tsp = gettimeofday_us()
		tsc[funcname, nesting[funcname] ] = tsp

		datestr = datestring_s(timestamp())
#		if(name in syscalls_nonreturn)
#			datestr = datestr . "::noreturn"
		
		if(printData > 0 && data != ""){
			printf("-> %s(%s) [%s]\n",
				funcname,
				data,
				datestr
			) 
		}
		else{
			printf("-> %s [%s]\n",
				funcname,
				datestr
			) 
		}
		calls++
	}
	else{
		if(printData > 0 && data != ""){
			printf("<- %s = %s [%s, %s]\n",
				funcname,
				data,
				datestring_s(timestamp()),
				( (print_time_spent  > 0 ) ? datestring_s(time_spent(funcname)) : "")
			) 
		}
		else{
			printf("<- %s [%s, %s]\n",
				funcname,
				datestring_s(timestamp()),
				( (print_time_spent  > 0 ) ? datestring_s(time_spent(funcname)) : "")
			) 
		}

		nesting[funcname] = nesting[funcname] - 1
#		if( nesting[funcname] == 0)
#			delete tsc[funcname]
		returns++
	}
}

probe syscall.*.call {
	logFunc(execname(), ppfunc(), pid(), target(), 1, $$vars)
}

probe syscall.*.return {
	logFunc(execname(), ppfunc(), pid(), target(), 0, (@defined($return) ? $$return : "" ))
}

# non-DWARF syscall probes
# used when you dont have the debuginfo-package installed
#probe nd_syscall.*.call {
#	logFunc(execname(), ppfunc(), pid(), target(), 1)
#}

#probe nd_syscall.*.return {
#	logFunc(execname(), ppfunc(), pid(), target(), 0)
#}
