#! /usr/bin/env stap

// BEGIN forktracking
global trackChildren = 1
global targets

function addTarget(new_tid:long){
	if( trackChildren &&  new_tid > 0)
		targets[new_tid] = new_tid
}

probe begin {
	addTarget(target())
}

probe end {
	delete targets
}

function isTarget() {
	foreach( t in targets)
		if(pid() == t)
			return 1
	return 0
}

probe kprocess.create {
	if( isTarget() ) {
		addTarget(new_pid)
	}
}

probe nd_syscall.fork.return {
	if( isTarget() ){
		addTarget(strtol(retstr,10))
	}
}
// END forktracking

function logFunc(call){
	if( execname() == "stapio" || pid() != target() || ppfunc() == "tracesys") {
		return 0
	}
	else {
		if( call == 1) {
			printf("-> %s\n", ppfunc())
		}
		else {
			printf("<- %s\n", ppfunc())
		}
	}
}

probe syscall.*.call {
	logFunc(1)
}

probe syscall.*.return {
	logFunc(0)
}

# non-DWARF syscall probes
# used when you dont have the debuginfo-package installed
#probe nd_syscall.*.call {
#	logFunc(execname(), ppfunc(), pid(), target(), 1)
#}

#probe nd_syscall.*.return {
#	logFunc(execname(), ppfunc(), pid(), target(), 0)
#}
