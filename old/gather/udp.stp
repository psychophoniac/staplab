function isTarget(tid){
	return pid() == target()
}

/**
args:
sock Network socket used by the process 
name The name of this probe 
dport UDP destination port 
saddr A string representing the source IP address 
size Number of bytes sent by the process 
sport UDP source port 
daddr A string representing the destination IP address 
family IP address family 
**/
probe udp.sendmsg {
	if( isTarget(pid()) ){
		printf("%s socket:%s:%d source:%s:%d dest:%s:%d family:%s size:%d\n",
			name,
			inet_get_ip_source(sock),
			inet_get_local_port(sock),
			saddr,
			sport,
			daddr,
			dport,
			sock_fam_num2str(family),
			size
		)
	}
}

// args: name, size
probe udp.sendmsg.return {
	if( isTarget(pid()) ){
		printf("%s.return, size:%d\n" ,
			name,
			size
		)
	}
}

/**
args:
sock Network socket used by the process 
name The name of this probe 
dport UDP destination port 
saddr A string representing the source IP address 
size Number of bytes sent by the process 
sport UDP source port 
daddr A string representing the destination IP address 
family IP address family 
**/
probe udp.recvmsg {
	if( isTarget(pid()) ){
		printf("%s socket:%s:%d source:%s:%d dest:%s:%d family:%s size:%d\n",
			name,
			inet_get_ip_source(sock),
			inet_get_local_port(sock),
			saddr,
			sport,
			daddr,
			dport,
			sock_fam_num2str(family),
			size
		)
	}
}

/**
args:
name The name of this probe 
dport UDP destination port 
saddr A string representing the source IP address 
size Number of bytes sent by the process 
sport UDP source port 
daddr A string representing the destination IP address 
family IP address family 
**/
probe udp.recvmsg {
	if( isTarget(pid()) ){
		printf("%s.return source:%s:%d dest:%s:%d family:%s size:%d\n",
			name,
			saddr,
			sport,
			daddr,
			dport,
			sock_fam_num2str(family),
			size
		)
	}
}

/**
args:
sock Network socket used by the process 
name The name of this probe 
dport UDP destination port 
saddr A string representing the source IP address 
size Number of bytes sent by the process 
sport UDP source port 
daddr A string representing the destination IP address 
family IP address family 
**/
probe udp.disconnect {
	if( isTarget(pid()) ){
		printf("%s socket:%s:%d source:%s:%d dest:%s:%d family:%s\n",
			name,
			inet_get_ip_source(sock),
			inet_get_local_port(sock),
			saddr,
			sport,
			daddr,
			dport,
			sock_fam_num2str(family)
		)
	}
}

/**
args:
sock Network socket used by the process 
name The name of this probe 
dport UDP destination port 
saddr A string representing the source IP address 
size Number of bytes sent by the process 
sport UDP source port 
daddr A string representing the destination IP address 
family IP address family 
**/
probe udp.disconnect.return {
	if( isTarget(pid()) ){
		printf("%s.return source:%s:%d dest:%s:%d family:%s retVal:%d\n",
			name,
			saddr,
			sport,
			daddr,
			dport,
			sock_fam_num2str(family),
			ret
		)
	}
}

